<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on :fish: Fishy Data</title>
    <link>/</link>
    <description>Recent content in Home on :fish: Fishy Data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Productivity boosters - GitHub from the command line</title>
      <link>/post/2021/01/14/productivity-boosters-github-from-the-command-line/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/14/productivity-boosters-github-from-the-command-line/</guid>
      <description>The problem I find myself navigating around the GitHub site between various repos/issues etc. For sure this requires too much mouse use when many of these tasks could be done from the command line.</description>
    </item>
    
    <item>
      <title>A (modified) blogdown blog with hugo-ivy theme</title>
      <link>/post/2021/01/13/a-slightly-modified-blogdown-blog-with-yihui-hugo-ivy-theme/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/13/a-slightly-modified-blogdown-blog-with-yihui-hugo-ivy-theme/</guid>
      <description>Selecting a theme I made this blog with blogdown. blogdown is an R package by the awesome Yihui Xie that allows you to combine Hugo and Rmarkdown. For example, if you check out Joe Thorley&amp;rsquo;s sweet blog and this post, you can see that it is great for demonstrating R code and generating output from that code to explain analyses and statistical concepts. Even if you aren&amp;rsquo;t using R though, it is just really sweet to make posts in plain markdown.</description>
    </item>
    
    <item>
      <title>Designing a PostrgreSQL db for acoustic telemetry</title>
      <link>/post/2021/01/13/designing-a-postrgresql-db-for-acoustic-telemetry/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/13/designing-a-postrgresql-db-for-acoustic-telemetry/</guid>
      <description>This is a series of posts that will aim to:
1. outline a philosophy and structure for the ideal acoustic telemetry database
1. justify this philosophy and structure within the context of a broader analysis pipeline (i.e.Â inputs/outputs) 1. demonstrate specific SQL and R code to achieve this
This first post will focus on the first two points.
The analysis pipeline: punch raw data -&amp;gt; clean data for db -&amp;gt; insert data into db (via app) -&amp;gt; receive informative error messages -&amp;gt; repeat until successful -&amp;gt; PostgreSQL functions tidy data -&amp;gt; read tidied data into R for analysis</description>
    </item>
    
    <item>
      <title>Productivity boosters - Alfred &#43; .Rproj</title>
      <link>/post/2021/01/13/productivity-boosters-alfred-configuration/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/13/productivity-boosters-alfred-configuration/</guid>
      <description>The problem If you are opening and closing a lot of RStudio projects throughout the day, it&amp;rsquo;s useful to think about the most efficient way to search for and open .Rproj files. I want to avoid using my mouse in a Finder window and I find that the default Mac search app Spotlight provides too many results.
The solution I came across this tip by Hadley Wickham that makes use of the Alfred app1.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hi ðŸ‘‹ I&amp;rsquo;m Seb Dalgarno.
This is my blog for all things R, fish movement, statistics, data visualization, and various other data/computery things. Fishy data is of course a little play on words. I am a computational biologist often working with fish data and this data is often fishy. The data cleaning process has forced me to become a better coder and to think more deeply about efficient analysis pipelines.</description>
    </item>
    
    <item>
      <title>Productivity boosters - git alias</title>
      <link>/post/2021/01/12/productivity-boosters-git-alias/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/01/12/productivity-boosters-git-alias/</guid>
      <description>The problem For years I have staged, committed and pushed changes with the RStudio Git interface.
It works! But it can be time-consuming when you are doing it a lot. And I&amp;rsquo;ve been trying to use my mouse less. It would be better to do this in the comand line.
The solution I found this solution on stackoverflow, which suggests staging and committing all files by running the following in the command line:</description>
    </item>
    
  </channel>
</rss>
